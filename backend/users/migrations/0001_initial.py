# Generated by Django 4.2 on 2024-07-31 17:21

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import users.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'навык',
                'verbose_name_plural': 'Навыки',
                'default_related_name': 'skills',
            },
        ),
        migrations.CreateModel(
            name='GazpromUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('employee_fio', models.CharField(max_length=250, verbose_name='ФИО')),
                ('employee_position', models.CharField(max_length=250, verbose_name='Должность')),
                ('employee_date_of_birth', models.DateField(validators=[users.validators.validate_birth_date], verbose_name='Дата рождения')),
                ('employee_date_of_hire', models.DateField(validators=[users.validators.validate_hire_date], verbose_name='Дата найма')),
                ('employee_avatar', models.ImageField(upload_to='', verbose_name='Аватар')),
                ('employee_telegram', models.CharField(max_length=50, unique=True, verbose_name='Телеграм')),
                ('employee_telephone', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='Номер телефона должен начинаться с + и состоять из 10-15 цифр', regex='^\\+\\d{10,15}$')], verbose_name='Номер телефона')),
                ('employee_type_job', models.CharField(choices=[('full_time', 'полная занятость'), ('part_time', 'частичная занятость'), ('full_time', 'полная занятость'), ('full_time', 'полная занятость')], max_length=50, verbose_name='Тип занятости')),
                ('employee_status', models.CharField(choices=[('working', 'в работе'), ('vacation', 'отпуск'), ('sick', 'больничный'), ('fired', 'уволен')], max_length=50, verbose_name='Статус')),
                ('employee_location', models.CharField(max_length=300, verbose_name='Локация')),
                ('employee_grade', models.CharField(choices=[('1', 'Gr-1'), ('2', 'Gr-2'), ('3', 'Gr-3'), ('4', 'Gr-4'), ('5', 'Gr-5'), ('6', 'Gr-6'), ('7', 'Gr-7')], max_length=50, verbose_name='Грейд')),
                ('employee_description', models.TextField(verbose_name='Биография')),
                ('is_employee_outsource', models.BooleanField(default=False, verbose_name='Outsource')),
                ('is_superuser', models.BooleanField(default=False, verbose_name='Суперпользователь')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('skills', models.ManyToManyField(to='users.skill', verbose_name='Навыки')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'пользователь',
                'verbose_name_plural': 'Пользователи',
                'default_related_name': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
